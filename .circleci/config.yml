version: 2.1

jobs:
  build:
    #working_directory: ~/circleci-python
    docker:
      - image: "circleci/python:3.9"
    steps:
      - checkout
      - restore_cache:
          key: deps2-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            echo "STARTING - INSTALLING VENV..........."
            python -m venv venv
            . venv/bin/activate
            echo "INSTALLING ARTIFACTS..........."
            pip install artifacts
            echo "INSTALLING REQUIREMENTS..........."
            pip install -r requirements.txt
            # touch requirements.txt
            # pipenv install
            echo "FINISHED"
      - save_cache:
          key: deps2-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ""
      - store_artifacts:
          path: venv/share/artifacts
      
  test:
    # working_directory: ~/circleci-python
    docker:
      - image: "circleci/python:3.9"
    parallelism: 2
    steps:
      - checkout
      # - run: python3 main-test.py
      - run: pip install unittest-xml-reporting
      # - run:
      #     command: | 
      #         python -m xmlrunner tests.calc_test -v
      #         python -m xmlrunner tests.calc_extra_test -v
      - run:
          command: |
            echo $(circleci tests glob "tests/**/calc*test.py")
            TESTFILES=$(circleci tests glob "tests/**/calc*test.py")
            echo $TESTFILES | tr ' ' '\n' | sort | uniq > circleci_test_files.txt
            cat circleci_test_files.txt
            TESTFILES=$(circleci tests split circleci_test_files.txt)
            TESTFILES=$(echo $TESTFILES | tr "/" "." | sed 's/.py//g')
            echo $TESTFILES
            python -m xmlrunner $TESTFILES
            TESTRESULTS=
      - store_test_results:
          path: ..

workflows:
  # build_and_test:
  conditional-workflow:
    when:
      equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - build
      - test:
          requires:
            - build










  # build_and_test:
  #   jobs:
  #     # - when:
  #     #   condition: 
  #     #     equal: [master, << pipeline.git.branch >>]
  #       - build
  #       - test:
  #           requires:
  #             - build