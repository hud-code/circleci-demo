version: 2.1

jobs:
  build:
    #working_directory: ~/circleci-python
    docker:
      - image: "circleci/python:3.9"
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
      - run:
          name: Install Python deps in a venv
          command: |
            python -m venv venv
            . venv/bin/activate
            pip install artifacts
            pip install -r requirements.txt
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "requirements.txt" }}
          paths:
            - ""
      - store_artifacts:
          path: venv/share/artifacts
      - run: python -m calc
      - run: echo "test 5"
      
  test:
    # working_directory: ~/circleci-python
    docker:
      - image: "circleci/python:3.9"
    parallelism: 2
    steps:
      - checkout
      # - run: python3 main-test.py
      - run: pip install unittest-xml-reporting
      - run:
          command: | 
              python -m xmlrunner tests.calc_test -v
              python -m xmlrunner tests.calc_extra_test -v
      - run:
          command: |
            echo $(circleci tests glob "tests/**/calc*test.py")
            TESTFILES=$(circleci tests glob "tests/**/calc*test.py")
      # - run:
      #   command: |
      #     # get test files while ignoring __init__ files
      #     echo(circleci tests glob "/tests/*.py" | sed 's/\S\+__init__.py//g')
      #     # TESTFILES=$(circleci tests glob "/tests/*.py" | sed 's/\S\+__init__.py//g')
      #     # echo $TESTFILES | tr ' ' '\n' | sort | uniq > circleci_test_files.txt
      #     # cat circleci_test_files.txt
      #     # TESTFILES=$(circleci tests split --split-by=timings circleci_test_files.txt)
      #     # # massage filepaths into format manage.py test accepts
      #     # TESTFILES=$(echo $TESTFILES | tr "/" "." | sed 's/.py//g')
      #     # echo $TESTFILES
      #     # pipenv run python manage.py test --verbosity=2 $TESTFILES  
      - store_test_results:
          path: ..

workflows:
  build_and_test:
  # conditional-workflow:
  #   when:
  #     equal: [ master, << pipeline.git.branch >> ]
    jobs:
      - build
      - test:
          requires:
            - build










  # build_and_test:
  #   jobs:
  #     # - when:
  #     #   condition: 
  #     #     equal: [master, << pipeline.git.branch >>]
  #       - build
  #       - test:
  #           requires:
  #             - build